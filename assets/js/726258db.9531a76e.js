"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[581],{1402:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>d});var l=a(8168),t=(a(6540),a(5680));const i={id:"installation",title:"Installation Guide",slug:"/installation"},o=void 0,r={unversionedId:"installation",id:"installation",title:"Installation Guide",description:"Overview",source:"@site/../docs/installation.md",sourceDirName:".",slug:"/installation",permalink:"/sealed-monad/installation",draft:!1,editUrl:"https://github.com/theiterators/sealed-monad/tree/master/docs/../docs/installation.md",tags:[],version:"current",frontMatter:{id:"installation",title:"Installation Guide",slug:"/installation"},sidebar:"docs",previous:{title:"Motivations & Core Concepts",permalink:"/sealed-monad/motivations"},next:{title:"Practical Use Cases",permalink:"/sealed-monad/usecases"}},s={},d=[{value:"Overview",id:"overview",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Scala Versions",id:"scala-versions",level:3},{value:"Platforms",id:"platforms",level:3},{value:"Dependencies",id:"dependencies",level:3},{value:"Installation",id:"installation",level:2},{value:"SBT",id:"sbt",level:3},{value:"Mill",id:"mill",level:3},{value:"Maven",id:"maven",level:3},{value:"Gradle (Kotlin DSL)",id:"gradle-kotlin-dsl",level:3},{value:"Importing Sealed Monad",id:"importing-sealed-monad",level:2},{value:"Basic Import",id:"basic-import",level:3},{value:"Recommended Import (with syntax extensions)",id:"recommended-import-with-syntax-extensions",level:3},{value:"Verification",id:"verification",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Missing Dependency",id:"missing-dependency",level:4},{value:"Version Conflicts",id:"version-conflicts",level:4},{value:"Import Issues",id:"import-issues",level:4},{value:"Compatibility Notes",id:"compatibility-notes",level:3},{value:"Additional Resources",id:"additional-resources",level:2},{value:"License",id:"license",level:2}],p={toc:d},c="wrapper";function u(e){let{components:n,...a}=e;return(0,t.yg)(c,(0,l.A)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,t.yg)("h2",{id:"overview"},"Overview"),(0,t.yg)("p",null,"Sealed Monad is a Scala library for business logic-oriented, for-comprehension-style error handling. This guide covers installation methods for various build tools and platforms."),(0,t.yg)("h2",{id:"requirements"},"Requirements"),(0,t.yg)("h3",{id:"scala-versions"},"Scala Versions"),(0,t.yg)("p",null,"Sealed Monad supports the following Scala versions:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Scala 2.13.x"),(0,t.yg)("li",{parentName:"ul"},"Scala 3.x")),(0,t.yg)("h3",{id:"platforms"},"Platforms"),(0,t.yg)("p",null,"Sealed Monad is available for:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"JVM"),(0,t.yg)("li",{parentName:"ul"},"Scala.js"),(0,t.yg)("li",{parentName:"ul"},"Scala Native")),(0,t.yg)("h3",{id:"dependencies"},"Dependencies"),(0,t.yg)("p",null,"Sealed Monad has the following dependencies:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"cats-core")),(0,t.yg)("h2",{id:"installation"},"Installation"),(0,t.yg)("h3",{id:"sbt"},"SBT"),(0,t.yg)("p",null,"Add the following to your ",(0,t.yg)("inlineCode",{parentName:"p"},"build.sbt")," file:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},'libraryDependencies += "pl.iterators" %% "sealed-monad" % "1.3"\n')),(0,t.yg)("p",null,"The ",(0,t.yg)("inlineCode",{parentName:"p"},"%%")," operator automatically adds the appropriate Scala version suffix to the artifact name."),(0,t.yg)("h3",{id:"mill"},"Mill"),(0,t.yg)("p",null,"Add this to your ",(0,t.yg)("inlineCode",{parentName:"p"},"build.sc")," file:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},"import $ivy.`pl.iterators::sealed-monad:1.3`\n")),(0,t.yg)("p",null,"Or, if using a module definition:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},'object myModule extends ScalaModule {\n  def scalaVersion = "2.13.12" // or your Scala version\n  def ivyDeps = Agg(\n    ivy"pl.iterators::sealed-monad:1.3"\n  )\n}\n')),(0,t.yg)("h3",{id:"maven"},"Maven"),(0,t.yg)("p",null,"Add this to your ",(0,t.yg)("inlineCode",{parentName:"p"},"pom.xml")," file:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-xml"},"<dependency>\n    <groupId>pl.iterators</groupId>\n    <artifactId>sealed-monad_${scala.binary.version}</artifactId>\n    <version>1.3</version>\n</dependency>\n")),(0,t.yg)("p",null,"Replace ",(0,t.yg)("inlineCode",{parentName:"p"},"${scala.binary.version}")," with ",(0,t.yg)("inlineCode",{parentName:"p"},"2.13")," or ",(0,t.yg)("inlineCode",{parentName:"p"},"3"),"."),(0,t.yg)("h3",{id:"gradle-kotlin-dsl"},"Gradle (Kotlin DSL)"),(0,t.yg)("p",null,"If using the Scala plugin in Gradle, add this to ",(0,t.yg)("inlineCode",{parentName:"p"},"build.gradle.kts"),":"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-kotlin"},'dependencies {\n    implementation("pl.iterators:sealed-monad_${scalaBinaryVersion}:1.3")\n}\n')),(0,t.yg)("p",null,"Define ",(0,t.yg)("inlineCode",{parentName:"p"},"scalaBinaryVersion")," in your ",(0,t.yg)("inlineCode",{parentName:"p"},"gradle.properties")," or inline:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-kotlin"},'val scalaBinaryVersion = "2.13" // or "3"\n')),(0,t.yg)("h2",{id:"importing-sealed-monad"},"Importing Sealed Monad"),(0,t.yg)("p",null,"To use Sealed Monad in your code, import it as follows:"),(0,t.yg)("h3",{id:"basic-import"},"Basic Import"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},"import pl.iterators.sealedmonad._\n")),(0,t.yg)("h3",{id:"recommended-import-with-syntax-extensions"},"Recommended Import (with syntax extensions)"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},"import pl.iterators.sealedmonad.syntax._\n")),(0,t.yg)("h2",{id:"verification"},"Verification"),(0,t.yg)("p",null,"To verify that Sealed Monad is correctly installed and imported, you can run a simple test:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},'import pl.iterators.sealedmonad.syntax._\nimport cats.Id\n\n// A simple sealed trait for responses\nsealed trait Response\ncase class Success(value: String) extends Response\ncase object NotFound extends Response\n\n// Test function using Sealed Monad\ndef test(input: Option[String]): Id[Response] = {\n  (for {\n    value <- input.valueOr[Response](NotFound)\n  } yield Success(value)).run\n}\n\n// Try it out\nval result1 = test(Some("Hello"))  // Should be Success("Hello")\nval result2 = test(None)           // Should be NotFound\n')),(0,t.yg)("h2",{id:"troubleshooting"},"Troubleshooting"),(0,t.yg)("h3",{id:"common-issues"},"Common Issues"),(0,t.yg)("h4",{id:"missing-dependency"},"Missing Dependency"),(0,t.yg)("p",null,"If you encounter errors like ",(0,t.yg)("inlineCode",{parentName:"p"},"object sealedmonad is not a member of package pl.iterators"),", make sure you've added the correct dependency to your build file and that your build tool has resolved it."),(0,t.yg)("h4",{id:"version-conflicts"},"Version Conflicts"),(0,t.yg)("p",null,"If you encounter version conflicts with cats or other libraries, you may need to explicitly specify the versions:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},'dependencyOverrides += "org.typelevel" %% "cats-core" % "2.10.0"\n')),(0,t.yg)("h4",{id:"import-issues"},"Import Issues"),(0,t.yg)("p",null,"If you're having trouble with imports, try the explicit imports mentioned above instead of the wildcard import."),(0,t.yg)("h3",{id:"compatibility-notes"},"Compatibility Notes"),(0,t.yg)("p",null,"Sealed Monad is built on top of cats and is designed to work seamlessly with cats-effect for effectful computations. It should be compatible with most libraries in the Typelevel ecosystem."),(0,t.yg)("h2",{id:"additional-resources"},"Additional Resources"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"https://theiterators.github.io/sealed-monad/"},"Official Documentation")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"https://github.com/theiterators/sealed-monad"},"GitHub Repository")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"https://javadoc.io/doc/pl.iterators/sealed-monad_2.13/latest/index.html"},"API Documentation"))),(0,t.yg)("h2",{id:"license"},"License"),(0,t.yg)("p",null,"Sealed Monad is licensed under the Apache 2.0 License."))}u.isMDXComponent=!0},5680:(e,n,a)=>{a.d(n,{xA:()=>p,yg:()=>y});var l=a(6540);function t(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,l)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){t(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function r(e,n){if(null==e)return{};var a,l,t=function(e,n){if(null==e)return{};var a,l,t={},i=Object.keys(e);for(l=0;l<i.length;l++)a=i[l],n.indexOf(a)>=0||(t[a]=e[a]);return t}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(l=0;l<i.length;l++)a=i[l],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(t[a]=e[a])}return t}var s=l.createContext({}),d=function(e){var n=l.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},p=function(e){var n=d(e.components);return l.createElement(s.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return l.createElement(l.Fragment,{},n)}},m=l.forwardRef((function(e,n){var a=e.components,t=e.mdxType,i=e.originalType,s=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),c=d(a),m=t,y=c["".concat(s,".").concat(m)]||c[m]||u[m]||i;return a?l.createElement(y,o(o({ref:n},p),{},{components:a})):l.createElement(y,o({ref:n},p))}));function y(e,n){var a=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var i=a.length,o=new Array(i);o[0]=m;var r={};for(var s in n)hasOwnProperty.call(n,s)&&(r[s]=n[s]);r.originalType=e,r[c]="string"==typeof e?e:t,o[1]=r;for(var d=2;d<i;d++)o[d]=a[d];return l.createElement.apply(null,o)}return l.createElement.apply(null,a)}m.displayName="MDXCreateElement"}}]);