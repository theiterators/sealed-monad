"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[581],{1402:(e,n,l)=>{l.r(n),l.d(n,{contentTitle:()=>r,default:()=>p,frontMatter:()=>t,metadata:()=>o,toc:()=>s});var a=l(8168),i=(l(6540),l(5680));const t={id:"installation",title:"Installation Guide",slug:"/installation"},r=void 0,o={unversionedId:"installation",id:"installation",title:"Installation Guide",description:"Overview",source:"@site/../docs/installation.md",sourceDirName:".",slug:"/installation",permalink:"/sealed-monad/installation",editUrl:"https://github.com/theiterators/sealed-monad/tree/master/docs/../docs/installation.md",tags:[],version:"current",frontMatter:{id:"installation",title:"Installation Guide",slug:"/installation"},sidebar:"docs",previous:{title:"Motivations & Core Concepts",permalink:"/sealed-monad/motivations"},next:{title:"Practical Use Cases",permalink:"/sealed-monad/usecases"}},s=[{value:"Overview",id:"overview",children:[],level:2},{value:"Requirements",id:"requirements",children:[{value:"Scala Versions",id:"scala-versions",children:[],level:3},{value:"Platforms",id:"platforms",children:[],level:3},{value:"Dependencies",id:"dependencies",children:[],level:3}],level:2},{value:"Installation",id:"installation",children:[{value:"SBT",id:"sbt",children:[],level:3},{value:"Mill",id:"mill",children:[],level:3},{value:"Maven",id:"maven",children:[],level:3},{value:"Gradle (Kotlin DSL)",id:"gradle-kotlin-dsl",children:[],level:3}],level:2},{value:"Importing Sealed Monad",id:"importing-sealed-monad",children:[{value:"Basic Import",id:"basic-import",children:[],level:3},{value:"Recommended Import (with syntax extensions)",id:"recommended-import-with-syntax-extensions",children:[],level:3}],level:2},{value:"Verification",id:"verification",children:[],level:2},{value:"Troubleshooting",id:"troubleshooting",children:[{value:"Common Issues",id:"common-issues",children:[{value:"Missing Dependency",id:"missing-dependency",children:[],level:4},{value:"Version Conflicts",id:"version-conflicts",children:[],level:4},{value:"Import Issues",id:"import-issues",children:[],level:4}],level:3},{value:"Compatibility Notes",id:"compatibility-notes",children:[],level:3}],level:2},{value:"Additional Resources",id:"additional-resources",children:[],level:2},{value:"License",id:"license",children:[],level:2}],d={toc:s},c="wrapper";function p(e){let{components:n,...l}=e;return(0,i.yg)(c,(0,a.A)({},d,l,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h2",{id:"overview"},"Overview"),(0,i.yg)("p",null,"Sealed Monad is a Scala library for business logic-oriented, for-comprehension-style error handling. This guide covers installation methods for various build tools and platforms."),(0,i.yg)("h2",{id:"requirements"},"Requirements"),(0,i.yg)("h3",{id:"scala-versions"},"Scala Versions"),(0,i.yg)("p",null,"Sealed Monad supports the following Scala versions:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Scala 2.13.x"),(0,i.yg)("li",{parentName:"ul"},"Scala 3.x")),(0,i.yg)("h3",{id:"platforms"},"Platforms"),(0,i.yg)("p",null,"Sealed Monad is available for:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"JVM"),(0,i.yg)("li",{parentName:"ul"},"Scala.js"),(0,i.yg)("li",{parentName:"ul"},"Scala Native")),(0,i.yg)("h3",{id:"dependencies"},"Dependencies"),(0,i.yg)("p",null,"Sealed Monad has the following dependencies:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"cats-core")),(0,i.yg)("h2",{id:"installation"},"Installation"),(0,i.yg)("h3",{id:"sbt"},"SBT"),(0,i.yg)("p",null,"Add the following to your ",(0,i.yg)("inlineCode",{parentName:"p"},"build.sbt")," file:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala"},'libraryDependencies += "pl.iterators" %% "sealed-monad" % "1.3"\n')),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"%%")," operator automatically adds the appropriate Scala version suffix to the artifact name."),(0,i.yg)("h3",{id:"mill"},"Mill"),(0,i.yg)("p",null,"Add this to your ",(0,i.yg)("inlineCode",{parentName:"p"},"build.sc")," file:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala"},"import $ivy.`pl.iterators::sealed-monad:1.3`\n")),(0,i.yg)("p",null,"Or, if using a module definition:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala"},'object myModule extends ScalaModule {\n  def scalaVersion = "2.13.12" // or your Scala version\n  def ivyDeps = Agg(\n    ivy"pl.iterators::sealed-monad:1.3"\n  )\n}\n')),(0,i.yg)("h3",{id:"maven"},"Maven"),(0,i.yg)("p",null,"Add this to your ",(0,i.yg)("inlineCode",{parentName:"p"},"pom.xml")," file:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-xml"},"<dependency>\n    <groupId>pl.iterators</groupId>\n    <artifactId>sealed-monad_${scala.binary.version}</artifactId>\n    <version>1.3</version>\n</dependency>\n")),(0,i.yg)("p",null,"Replace ",(0,i.yg)("inlineCode",{parentName:"p"},"${scala.binary.version}")," with ",(0,i.yg)("inlineCode",{parentName:"p"},"2.13")," or ",(0,i.yg)("inlineCode",{parentName:"p"},"3"),"."),(0,i.yg)("h3",{id:"gradle-kotlin-dsl"},"Gradle (Kotlin DSL)"),(0,i.yg)("p",null,"If using the Scala plugin in Gradle, add this to ",(0,i.yg)("inlineCode",{parentName:"p"},"build.gradle.kts"),":"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-kotlin"},'dependencies {\n    implementation("pl.iterators:sealed-monad_${scalaBinaryVersion}:1.3")\n}\n')),(0,i.yg)("p",null,"Define ",(0,i.yg)("inlineCode",{parentName:"p"},"scalaBinaryVersion")," in your ",(0,i.yg)("inlineCode",{parentName:"p"},"gradle.properties")," or inline:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-kotlin"},'val scalaBinaryVersion = "2.13" // or "3"\n')),(0,i.yg)("h2",{id:"importing-sealed-monad"},"Importing Sealed Monad"),(0,i.yg)("p",null,"To use Sealed Monad in your code, import it as follows:"),(0,i.yg)("h3",{id:"basic-import"},"Basic Import"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala"},"import pl.iterators.sealedmonad._\n")),(0,i.yg)("h3",{id:"recommended-import-with-syntax-extensions"},"Recommended Import (with syntax extensions)"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala"},"import pl.iterators.sealedmonad.syntax._\n")),(0,i.yg)("h2",{id:"verification"},"Verification"),(0,i.yg)("p",null,"To verify that Sealed Monad is correctly installed and imported, you can run a simple test:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala"},'import pl.iterators.sealedmonad.syntax._\nimport cats.Id\n\n// A simple sealed trait for responses\nsealed trait Response\ncase class Success(value: String) extends Response\ncase object NotFound extends Response\n\n// Test function using Sealed Monad\ndef test(input: Option[String]): Id[Response] = {\n  (for {\n    value <- input.valueOr[Response](NotFound)\n  } yield Success(value)).run\n}\n\n// Try it out\nval result1 = test(Some("Hello"))  // Should be Success("Hello")\nval result2 = test(None)           // Should be NotFound\n')),(0,i.yg)("h2",{id:"troubleshooting"},"Troubleshooting"),(0,i.yg)("h3",{id:"common-issues"},"Common Issues"),(0,i.yg)("h4",{id:"missing-dependency"},"Missing Dependency"),(0,i.yg)("p",null,"If you encounter errors like ",(0,i.yg)("inlineCode",{parentName:"p"},"object sealedmonad is not a member of package pl.iterators"),", make sure you've added the correct dependency to your build file and that your build tool has resolved it."),(0,i.yg)("h4",{id:"version-conflicts"},"Version Conflicts"),(0,i.yg)("p",null,"If you encounter version conflicts with cats or other libraries, you may need to explicitly specify the versions:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala"},'dependencyOverrides += "org.typelevel" %% "cats-core" % "2.10.0"\n')),(0,i.yg)("h4",{id:"import-issues"},"Import Issues"),(0,i.yg)("p",null,"If you're having trouble with imports, try the explicit imports mentioned above instead of the wildcard import."),(0,i.yg)("h3",{id:"compatibility-notes"},"Compatibility Notes"),(0,i.yg)("p",null,"Sealed Monad is built on top of cats and is designed to work seamlessly with cats-effect for effectful computations. It should be compatible with most libraries in the Typelevel ecosystem."),(0,i.yg)("h2",{id:"additional-resources"},"Additional Resources"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://theiterators.github.io/sealed-monad/"},"Official Documentation")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://github.com/theiterators/sealed-monad"},"GitHub Repository")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://javadoc.io/doc/pl.iterators/sealed-monad_2.13/latest/index.html"},"API Documentation"))),(0,i.yg)("h2",{id:"license"},"License"),(0,i.yg)("p",null,"Sealed Monad is licensed under the Apache 2.0 License."))}p.isMDXComponent=!0},5680:(e,n,l)=>{l.d(n,{xA:()=>c,yg:()=>y});var a=l(6540);function i(e,n,l){return n in e?Object.defineProperty(e,n,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[n]=l,e}function t(e,n){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),l.push.apply(l,a)}return l}function r(e){for(var n=1;n<arguments.length;n++){var l=null!=arguments[n]?arguments[n]:{};n%2?t(Object(l),!0).forEach((function(n){i(e,n,l[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):t(Object(l)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(l,n))}))}return e}function o(e,n){if(null==e)return{};var l,a,i=function(e,n){if(null==e)return{};var l,a,i={},t=Object.keys(e);for(a=0;a<t.length;a++)l=t[a],n.indexOf(l)>=0||(i[l]=e[l]);return i}(e,n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(a=0;a<t.length;a++)l=t[a],n.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(i[l]=e[l])}return i}var s=a.createContext({}),d=function(e){var n=a.useContext(s),l=n;return e&&(l="function"==typeof e?e(n):r(r({},n),e)),l},c=function(e){var n=d(e.components);return a.createElement(s.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var l=e.components,i=e.mdxType,t=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=d(l),m=i,y=p["".concat(s,".").concat(m)]||p[m]||u[m]||t;return l?a.createElement(y,r(r({ref:n},c),{},{components:l})):a.createElement(y,r({ref:n},c))}));function y(e,n){var l=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var t=l.length,r=new Array(t);r[0]=m;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[p]="string"==typeof e?e:i,r[1]=o;for(var d=2;d<t;d++)r[d]=l[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,l)}m.displayName="MDXCreateElement"}}]);