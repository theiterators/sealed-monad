"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Introduction","href":"/sealed-monad/docs/intro","docId":"intro"},{"type":"link","label":"Observations","href":"/sealed-monad/docs/motivations","docId":"motivations"},{"type":"link","label":"Use Cases","href":"/sealed-monad/docs/usecases","docId":"usecases"}]},"docs":{"intro":{"id":"intro","title":"Introduction","description":"Scala library for nice business logic oriented, for-comprehension-style error handling.","sidebar":"tutorialSidebar"},"motivations":{"id":"motivations","title":"Observations","description":"Below are some practices we observed in our codebase that we find useful. By the way, by error we mean business-type of problem. We assume exceptions are handled by some kind of wrapper, like Future.","sidebar":"tutorialSidebar"},"usecases":{"id":"usecases","title":"Use Cases","description":"Our observations led us to creating Sealed Monad. Check out this ugly code:","sidebar":"tutorialSidebar"}}}')}}]);