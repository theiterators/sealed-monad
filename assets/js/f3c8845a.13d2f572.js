"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[617],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>m});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},s=Object.keys(e);for(o=0;o<s.length;o++)t=s[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)t=s[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var d=o.createContext({}),c=function(e){var n=o.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},l=function(e){var n=c(e.components);return o.createElement(d.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},h=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,d=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=c(t),h=r,m=u["".concat(d,".").concat(h)]||u[h]||p[h]||s;return t?o.createElement(m,a(a({ref:n},l),{},{components:t})):o.createElement(m,a({ref:n},l))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,a=new Array(s);a[0]=h;var i={};for(var d in n)hasOwnProperty.call(n,d)&&(i[d]=n[d]);i.originalType=e,i[u]="string"==typeof e?e:r,a[1]=i;for(var c=2;c<s;c++)a[c]=t[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}h.displayName="MDXCreateElement"},3320:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var o=t(7462),r=(t(7294),t(3905));const s={},a="Use Cases",i={unversionedId:"usecases",id:"usecases",title:"Use Cases",description:"Our observations led us to creating Sealed Monad. Check out this ugly code:",source:"@site/../sealed-docs/target/mdoc/usecases.md",sourceDirName:".",slug:"/usecases",permalink:"/sealed-monad/docs/usecases",editUrl:"https://github.com/theiterators/sealed-monad/tree/master/docs/../sealed-docs/target/mdoc/usecases.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Observations",permalink:"/sealed-monad/docs/motivations"}},d=[],c={toc:d},l="wrapper";function u(e){let{components:n,...t}=e;return(0,r.kt)(l,(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"use-cases"},"Use Cases"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import scala.concurrent.Future\n  import cats.instances.future._\n  import cats.Monad\n  import cats.data.OptionT\n  implicit val ec: scala.concurrent.ExecutionContext = scala.concurrent.ExecutionContext.global\n// ec: concurrent.ExecutionContext = scala.concurrent.impl.ExecutionContextImpl@29048a74\n  implicit val M: Monad[Future] = implicitly[Monad[Future]]\n// M: Monad[Future] = cats.instances.FutureInstances$$anon$1@9e7b82e\n\n  sealed trait Provider\n\n  final case class EmailAddress(value: String) extends AnyVal\n  final case class User(id: Long, email: EmailAddress, archived: Boolean)\n  final case class AuthMethod(provider: Provider) extends AnyVal\n  \n  sealed trait LoginResponse\n\n  object LoginResponse {\n      final case class LoggedIn(token: String)             extends LoginResponse\n      case object AccountsMergeRequested                   extends LoginResponse\n      final case class AccountsMerged(token: String)       extends LoginResponse\n      case object InvalidCredentials                       extends LoginResponse\n      case object Deleted                                  extends LoginResponse\n      case object ProviderAuthFailed                       extends LoginResponse\n  }\n")),(0,r.kt)("p",null,"Our observations led us to creating Sealed Monad. Check out this ugly code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"def login(email: String,\n          findUser: String => Future[Option[User]],\n          findAuthMethod: (Long, Provider) => Future[Option[AuthMethod]],\n          issueTokenFor: User => String,\n          checkAuthMethodAction: AuthMethod => Boolean,\n          authMethodFromUserIdF: Long => AuthMethod,\n          mergeAccountsAction: (AuthMethod, User) => Future[LoginResponse]): Future[LoginResponse] =\n  findUser(email).flatMap {\n    case None =>\n      M.pure(LoginResponse.InvalidCredentials)\n    case Some(user) if user.archived =>\n      M.pure(LoginResponse.Deleted)\n    case Some(user) =>\n      val authMethod = authMethodFromUserIdF(user.id)\n      val actionT = OptionT(findAuthMethod(user.id, authMethod.provider))\n        .map(checkAuthMethodAction(_))\n      actionT.value flatMap {\n        case Some(true) =>\n          M.pure(LoginResponse.LoggedIn(issueTokenFor(user)))\n        case Some(false) =>\n          M.pure(LoginResponse.InvalidCredentials)\n        case None =>\n          mergeAccountsAction(authMethod, user)\n      }\n  }\n")),(0,r.kt)("p",null,"Matches, ifs, monad-transformers everywhere! Yuck! Applying Sealed Monad:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import pl.iterators.sealedmonad.syntax._\n\ndef sealedLogin(email: String,\n                findUser: String => Future[Option[User]],\n                findAuthMethod: (Long, Provider) => Future[Option[AuthMethod]],\n                issueTokenFor: User => String,\n                checkAuthMethodAction: AuthMethod => Boolean,\n                authMethodFromUserIdF: Long => AuthMethod,\n                mergeAccountsAction: (AuthMethod, User) => Future[LoginResponse]): Future[LoginResponse] = {\n  val s = for {\n    user <- findUser(email)\n      .valueOr[LoginResponse](LoginResponse.InvalidCredentials)\n      .ensure(!_.archived, LoginResponse.Deleted)\n    userAuthMethod = authMethodFromUserIdF(user.id)\n    authMethod <- findAuthMethod(user.id, userAuthMethod.provider).valueOrF(mergeAccountsAction(userAuthMethod, user))\n  } yield if (checkAuthMethodAction(authMethod)) LoginResponse.LoggedIn(issueTokenFor(user)) else LoginResponse.InvalidCredentials\n\n  s.run\n}\n")),(0,r.kt)("p",null,"It's short, nice-looking and reads top-down."),(0,r.kt)("p",null,"Below approach focuses on making main service flow clear, understandable in few seconds and wholely contained in for-comprehension. Compiling example in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/theiterators/sealed-monad/blob/master/examples/src/main/scala/pl/iterators/sealedmonad/examples/Options.scala#L103"},"here"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"class Example3[M[_]: Monad] {\n  import pl.iterators.sealedmonad.Sealed\n  import pl.iterators.sealedmonad.syntax._\n\n  // whole main service flow contained in 3 descriptive words in for comprehension\n  def sealedLogin(email: String): M[LoginResponse] =\n    (for {\n      user        <- findAndValidateUser(email)\n      authMethod  <- findOrMergeAuthMethod(user)\n      loginResult <- validateAuthMethodAction(user, authMethod)\n    } yield loginResult).run\n\n  // three below private methods should have understandable, descriptive names. They hide boiler plate and contain error validation\n  private def findAndValidateUser(email: String): Sealed[M, User, LoginResponse] = ???\n  private def findOrMergeAuthMethod(user: User): Sealed[M, AuthMethod, LoginResponse] = ???\n  private def validateAuthMethodAction(user: User, authMethod: AuthMethod): Sealed[M, LoginResponse, Nothing] = ???\n\n  // below methods implementation could be coming from different services\n  def findUser: String => M[Option[User]]                         = ???\n  def findAuthMethod: (Long, Provider) => M[Option[AuthMethod]]   = ???\n  def authMethodFromUserIdF: Long => AuthMethod                   = ???\n  def mergeAccountsAction: (AuthMethod, User) => M[LoginResponse] = ???\n  def checkAuthMethodAction: AuthMethod => Boolean                = ???\n  def issueTokenFor: User => String                               = ???\n}\n")),(0,r.kt)("p",null,'The main flow consists just of 3 descriptive sentences that anyone can read and comprehend in few seconds. Everything is part of for-comprehension, which comes with the price of a little more boilerplate. Just a short look is required to\nunderstand what is happening in the service. Descriptive private method names serve as a "documentation". If one "needs to go deeper" into the validation details, then it will go to the body of the private method. Otherwise the validation/error handling code doesn\'t bloat understanding of the main method flow.'),(0,r.kt)("p",null,"For more examples go ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/theiterators/sealed-monad/blob/master/examples/src/main/scala/pl/iterators/sealedmonad/examples/Options.scala"},"here"),"."),(0,r.kt)("p",null,"If you're curious about Sealed Monad design process, checkout ",(0,r.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=uZ7IFQTYPic"},"this amazing video by Marcin Rze\u017anicki"),"."))}u.isMDXComponent=!0}}]);